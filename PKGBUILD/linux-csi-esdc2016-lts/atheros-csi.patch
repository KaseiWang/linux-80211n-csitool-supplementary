diff --git a/README b/README
index 69c68fb..05d0d6a 100644
--- a/README
+++ b/README
@@ -1,404 +1,5 @@
-        Linux kernel release 4.x <http://kernel.org/>
+This is a tool for extracting CSI information from commercial Atheros WiFi NIC. 
 
-These are the release notes for Linux version 4.  Read them carefully,
-as they tell you what this is all about, explain how to install the
-kernel, and what to do if something goes wrong. 
-
-WHAT IS LINUX?
-
-  Linux is a clone of the operating system Unix, written from scratch by
-  Linus Torvalds with assistance from a loosely-knit team of hackers across
-  the Net. It aims towards POSIX and Single UNIX Specification compliance.
-
-  It has all the features you would expect in a modern fully-fledged Unix,
-  including true multitasking, virtual memory, shared libraries, demand
-  loading, shared copy-on-write executables, proper memory management,
-  and multistack networking including IPv4 and IPv6.
-
-  It is distributed under the GNU General Public License - see the
-  accompanying COPYING file for more details. 
-
-ON WHAT HARDWARE DOES IT RUN?
-
-  Although originally developed first for 32-bit x86-based PCs (386 or higher),
-  today Linux also runs on (at least) the Compaq Alpha AXP, Sun SPARC and
-  UltraSPARC, Motorola 68000, PowerPC, PowerPC64, ARM, Hitachi SuperH, Cell,
-  IBM S/390, MIPS, HP PA-RISC, Intel IA-64, DEC VAX, AMD x86-64, AXIS CRIS,
-  Xtensa, Tilera TILE, AVR32 and Renesas M32R architectures.
-
-  Linux is easily portable to most general-purpose 32- or 64-bit architectures
-  as long as they have a paged memory management unit (PMMU) and a port of the
-  GNU C compiler (gcc) (part of The GNU Compiler Collection, GCC). Linux has
-  also been ported to a number of architectures without a PMMU, although
-  functionality is then obviously somewhat limited.
-  Linux has also been ported to itself. You can now run the kernel as a
-  userspace application - this is called UserMode Linux (UML).
-
-DOCUMENTATION:
-
- - There is a lot of documentation available both in electronic form on
-   the Internet and in books, both Linux-specific and pertaining to
-   general UNIX questions.  I'd recommend looking into the documentation
-   subdirectories on any Linux FTP site for the LDP (Linux Documentation
-   Project) books.  This README is not meant to be documentation on the
-   system: there are much better sources available.
-
- - There are various README files in the Documentation/ subdirectory:
-   these typically contain kernel-specific installation notes for some 
-   drivers for example. See Documentation/00-INDEX for a list of what
-   is contained in each file.  Please read the Changes file, as it
-   contains information about the problems, which may result by upgrading
-   your kernel.
-
- - The Documentation/DocBook/ subdirectory contains several guides for
-   kernel developers and users.  These guides can be rendered in a
-   number of formats:  PostScript (.ps), PDF, HTML, & man-pages, among others.
-   After installation, "make psdocs", "make pdfdocs", "make htmldocs",
-   or "make mandocs" will render the documentation in the requested format.
-
-INSTALLING the kernel source:
-
- - If you install the full sources, put the kernel tarball in a
-   directory where you have permissions (eg. your home directory) and
-   unpack it:
-
-     xz -cd linux-4.X.tar.xz | tar xvf -
-
-   Replace "X" with the version number of the latest kernel.
-
-   Do NOT use the /usr/src/linux area! This area has a (usually
-   incomplete) set of kernel headers that are used by the library header
-   files.  They should match the library, and not get messed up by
-   whatever the kernel-du-jour happens to be.
-
- - You can also upgrade between 4.x releases by patching.  Patches are
-   distributed in the xz format.  To install by patching, get all the
-   newer patch files, enter the top level directory of the kernel source
-   (linux-4.X) and execute:
-
-     xz -cd ../patch-4.x.xz | patch -p1
-
-   Replace "x" for all versions bigger than the version "X" of your current
-   source tree, _in_order_, and you should be ok.  You may want to remove
-   the backup files (some-file-name~ or some-file-name.orig), and make sure
-   that there are no failed patches (some-file-name# or some-file-name.rej).
-   If there are, either you or I have made a mistake.
-
-   Unlike patches for the 4.x kernels, patches for the 4.x.y kernels
-   (also known as the -stable kernels) are not incremental but instead apply
-   directly to the base 4.x kernel.  For example, if your base kernel is 4.0
-   and you want to apply the 4.0.3 patch, you must not first apply the 4.0.1
-   and 4.0.2 patches. Similarly, if you are running kernel version 4.0.2 and
-   want to jump to 4.0.3, you must first reverse the 4.0.2 patch (that is,
-   patch -R) _before_ applying the 4.0.3 patch. You can read more on this in
-   Documentation/applying-patches.txt
-
-   Alternatively, the script patch-kernel can be used to automate this
-   process.  It determines the current kernel version and applies any
-   patches found.
-
-     linux/scripts/patch-kernel linux
-
-   The first argument in the command above is the location of the
-   kernel source.  Patches are applied from the current directory, but
-   an alternative directory can be specified as the second argument.
-
- - Make sure you have no stale .o files and dependencies lying around:
-
-     cd linux
-     make mrproper
-
-   You should now have the sources correctly installed.
-
-SOFTWARE REQUIREMENTS
-
-   Compiling and running the 4.x kernels requires up-to-date
-   versions of various software packages.  Consult
-   Documentation/Changes for the minimum version numbers required
-   and how to get updates for these packages.  Beware that using
-   excessively old versions of these packages can cause indirect
-   errors that are very difficult to track down, so don't assume that
-   you can just update packages when obvious problems arise during
-   build or operation.
-
-BUILD directory for the kernel:
-
-   When compiling the kernel, all output files will per default be
-   stored together with the kernel source code.
-   Using the option "make O=output/dir" allow you to specify an alternate
-   place for the output files (including .config).
-   Example:
-
-     kernel source code: /usr/src/linux-4.X
-     build directory:    /home/name/build/kernel
-
-   To configure and build the kernel, use:
-
-     cd /usr/src/linux-4.X
-     make O=/home/name/build/kernel menuconfig
-     make O=/home/name/build/kernel
-     sudo make O=/home/name/build/kernel modules_install install
-
-   Please note: If the 'O=output/dir' option is used, then it must be
-   used for all invocations of make.
-
-CONFIGURING the kernel:
-
-   Do not skip this step even if you are only upgrading one minor
-   version.  New configuration options are added in each release, and
-   odd problems will turn up if the configuration files are not set up
-   as expected.  If you want to carry your existing configuration to a
-   new version with minimal work, use "make oldconfig", which will
-   only ask you for the answers to new questions.
-
- - Alternative configuration commands are:
-
-     "make config"      Plain text interface.
-
-     "make menuconfig"  Text based color menus, radiolists & dialogs.
-
-     "make nconfig"     Enhanced text based color menus.
-
-     "make xconfig"     X windows (Qt) based configuration tool.
-
-     "make gconfig"     X windows (Gtk) based configuration tool.
-
-     "make oldconfig"   Default all questions based on the contents of
-                        your existing ./.config file and asking about
-                        new config symbols.
-
-     "make silentoldconfig"
-                        Like above, but avoids cluttering the screen
-                        with questions already answered.
-                        Additionally updates the dependencies.
-
-     "make olddefconfig"
-                        Like above, but sets new symbols to their default
-                        values without prompting.
-
-     "make defconfig"   Create a ./.config file by using the default
-                        symbol values from either arch/$ARCH/defconfig
-                        or arch/$ARCH/configs/${PLATFORM}_defconfig,
-                        depending on the architecture.
-
-     "make ${PLATFORM}_defconfig"
-                        Create a ./.config file by using the default
-                        symbol values from
-                        arch/$ARCH/configs/${PLATFORM}_defconfig.
-                        Use "make help" to get a list of all available
-                        platforms of your architecture.
-
-     "make allyesconfig"
-                        Create a ./.config file by setting symbol
-                        values to 'y' as much as possible.
-
-     "make allmodconfig"
-                        Create a ./.config file by setting symbol
-                        values to 'm' as much as possible.
-
-     "make allnoconfig" Create a ./.config file by setting symbol
-                        values to 'n' as much as possible.
-
-     "make randconfig"  Create a ./.config file by setting symbol
-                        values to random values.
-
-     "make localmodconfig" Create a config based on current config and
-                           loaded modules (lsmod). Disables any module
-                           option that is not needed for the loaded modules.
-
-                           To create a localmodconfig for another machine,
-                           store the lsmod of that machine into a file
-                           and pass it in as a LSMOD parameter.
-
-                   target$ lsmod > /tmp/mylsmod
-                   target$ scp /tmp/mylsmod host:/tmp
-
-                   host$ make LSMOD=/tmp/mylsmod localmodconfig
-
-                           The above also works when cross compiling.
-
-     "make localyesconfig" Similar to localmodconfig, except it will convert
-                           all module options to built in (=y) options.
-
-   You can find more information on using the Linux kernel config tools
-   in Documentation/kbuild/kconfig.txt.
-
- - NOTES on "make config":
-
-    - Having unnecessary drivers will make the kernel bigger, and can
-      under some circumstances lead to problems: probing for a
-      nonexistent controller card may confuse your other controllers
-
-    - Compiling the kernel with "Processor type" set higher than 386
-      will result in a kernel that does NOT work on a 386.  The
-      kernel will detect this on bootup, and give up.
-
-    - A kernel with math-emulation compiled in will still use the
-      coprocessor if one is present: the math emulation will just
-      never get used in that case.  The kernel will be slightly larger,
-      but will work on different machines regardless of whether they
-      have a math coprocessor or not.
-
-    - The "kernel hacking" configuration details usually result in a
-      bigger or slower kernel (or both), and can even make the kernel
-      less stable by configuring some routines to actively try to
-      break bad code to find kernel problems (kmalloc()).  Thus you
-      should probably answer 'n' to the questions for "development",
-      "experimental", or "debugging" features.
-
-COMPILING the kernel:
-
- - Make sure you have at least gcc 3.2 available.
-   For more information, refer to Documentation/Changes.
-
-   Please note that you can still run a.out user programs with this kernel.
-
- - Do a "make" to create a compressed kernel image. It is also
-   possible to do "make install" if you have lilo installed to suit the
-   kernel makefiles, but you may want to check your particular lilo setup first.
-
-   To do the actual install, you have to be root, but none of the normal
-   build should require that. Don't take the name of root in vain.
-
- - If you configured any of the parts of the kernel as `modules', you
-   will also have to do "make modules_install".
-
- - Verbose kernel compile/build output:
-
-   Normally, the kernel build system runs in a fairly quiet mode (but not
-   totally silent).  However, sometimes you or other kernel developers need
-   to see compile, link, or other commands exactly as they are executed.
-   For this, use "verbose" build mode.  This is done by inserting
-   "V=1" in the "make" command.  E.g.:
-
-     make V=1 all
-
-   To have the build system also tell the reason for the rebuild of each
-   target, use "V=2".  The default is "V=0".
-
- - Keep a backup kernel handy in case something goes wrong.  This is 
-   especially true for the development releases, since each new release
-   contains new code which has not been debugged.  Make sure you keep a
-   backup of the modules corresponding to that kernel, as well.  If you
-   are installing a new kernel with the same version number as your
-   working kernel, make a backup of your modules directory before you
-   do a "make modules_install".
-
-   Alternatively, before compiling, use the kernel config option
-   "LOCALVERSION" to append a unique suffix to the regular kernel version.
-   LOCALVERSION can be set in the "General Setup" menu.
-
- - In order to boot your new kernel, you'll need to copy the kernel
-   image (e.g. .../linux/arch/i386/boot/bzImage after compilation)
-   to the place where your regular bootable kernel is found. 
-
- - Booting a kernel directly from a floppy without the assistance of a
-   bootloader such as LILO, is no longer supported.
-
-   If you boot Linux from the hard drive, chances are you use LILO, which
-   uses the kernel image as specified in the file /etc/lilo.conf.  The
-   kernel image file is usually /vmlinuz, /boot/vmlinuz, /bzImage or
-   /boot/bzImage.  To use the new kernel, save a copy of the old image
-   and copy the new image over the old one.  Then, you MUST RERUN LILO
-   to update the loading map!! If you don't, you won't be able to boot
-   the new kernel image.
-
-   Reinstalling LILO is usually a matter of running /sbin/lilo. 
-   You may wish to edit /etc/lilo.conf to specify an entry for your
-   old kernel image (say, /vmlinux.old) in case the new one does not
-   work.  See the LILO docs for more information. 
-
-   After reinstalling LILO, you should be all set.  Shutdown the system,
-   reboot, and enjoy!
-
-   If you ever need to change the default root device, video mode,
-   ramdisk size, etc.  in the kernel image, use the 'rdev' program (or
-   alternatively the LILO boot options when appropriate).  No need to
-   recompile the kernel to change these parameters. 
-
- - Reboot with the new kernel and enjoy. 
-
-IF SOMETHING GOES WRONG:
-
- - If you have problems that seem to be due to kernel bugs, please check
-   the file MAINTAINERS to see if there is a particular person associated
-   with the part of the kernel that you are having trouble with. If there
-   isn't anyone listed there, then the second best thing is to mail
-   them to me (torvalds@linux-foundation.org), and possibly to any other
-   relevant mailing-list or to the newsgroup.
-
- - In all bug-reports, *please* tell what kernel you are talking about,
-   how to duplicate the problem, and what your setup is (use your common
-   sense).  If the problem is new, tell me so, and if the problem is
-   old, please try to tell me when you first noticed it.
-
- - If the bug results in a message like
-
-     unable to handle kernel paging request at address C0000010
-     Oops: 0002
-     EIP:   0010:XXXXXXXX
-     eax: xxxxxxxx   ebx: xxxxxxxx   ecx: xxxxxxxx   edx: xxxxxxxx
-     esi: xxxxxxxx   edi: xxxxxxxx   ebp: xxxxxxxx
-     ds: xxxx  es: xxxx  fs: xxxx  gs: xxxx
-     Pid: xx, process nr: xx
-     xx xx xx xx xx xx xx xx xx xx
-
-   or similar kernel debugging information on your screen or in your
-   system log, please duplicate it *exactly*.  The dump may look
-   incomprehensible to you, but it does contain information that may
-   help debugging the problem.  The text above the dump is also
-   important: it tells something about why the kernel dumped code (in
-   the above example, it's due to a bad kernel pointer). More information
-   on making sense of the dump is in Documentation/oops-tracing.txt
-
- - If you compiled the kernel with CONFIG_KALLSYMS you can send the dump
-   as is, otherwise you will have to use the "ksymoops" program to make
-   sense of the dump (but compiling with CONFIG_KALLSYMS is usually preferred).
-   This utility can be downloaded from
-   ftp://ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/ .
-   Alternatively, you can do the dump lookup by hand:
-
- - In debugging dumps like the above, it helps enormously if you can
-   look up what the EIP value means.  The hex value as such doesn't help
-   me or anybody else very much: it will depend on your particular
-   kernel setup.  What you should do is take the hex value from the EIP
-   line (ignore the "0010:"), and look it up in the kernel namelist to
-   see which kernel function contains the offending address.
-
-   To find out the kernel function name, you'll need to find the system
-   binary associated with the kernel that exhibited the symptom.  This is
-   the file 'linux/vmlinux'.  To extract the namelist and match it against
-   the EIP from the kernel crash, do:
-
-     nm vmlinux | sort | less
-
-   This will give you a list of kernel addresses sorted in ascending
-   order, from which it is simple to find the function that contains the
-   offending address.  Note that the address given by the kernel
-   debugging messages will not necessarily match exactly with the
-   function addresses (in fact, that is very unlikely), so you can't
-   just 'grep' the list: the list will, however, give you the starting
-   point of each kernel function, so by looking for the function that
-   has a starting address lower than the one you are searching for but
-   is followed by a function with a higher address you will find the one
-   you want.  In fact, it may be a good idea to include a bit of
-   "context" in your problem report, giving a few lines around the
-   interesting one. 
-
-   If you for some reason cannot do the above (you have a pre-compiled
-   kernel image or similar), telling me as much about your setup as
-   possible will help.  Please read the REPORTING-BUGS document for details.
-
- - Alternatively, you can use gdb on a running kernel. (read-only; i.e. you
-   cannot change values or set break points.) To do this, first compile the
-   kernel with -g; edit arch/i386/Makefile appropriately, then do a "make
-   clean". You'll also need to enable CONFIG_PROC_FS (via "make config").
-
-   After you've rebooted with the new kernel, do "gdb vmlinux /proc/kcore".
-   You can now use all the usual gdb commands. The command to look up the
-   point where your system crashed is "l *0xXXXXXXXX". (Replace the XXXes
-   with the EIP value.)
-
-   gdb'ing a non-running kernel currently fails because gdb (wrongly)
-   disregards the starting offset for which the kernel is compiled.
+Please visit our maintainance page http://pdcc.ntu.edu.sg/wands/Atheros/ for detailed infomration.
 
+If you want more details on how to use this tool, please request the documentation http://pdcc.ntu.edu.sg/wands/Atheros/install/install_info.html.
diff --git a/drivers/net/wireless/ath/ath9k/Makefile b/drivers/net/wireless/ath/ath9k/Makefile
index ecda613..7ad7453 100644
--- a/drivers/net/wireless/ath/ath9k/Makefile
+++ b/drivers/net/wireless/ath/ath9k/Makefile
@@ -1,3 +1,5 @@
+obj-m   +=      ar9003_csi.o 
+
 ath9k-y +=	beacon.o \
 		gpio.o \
 		init.o \
diff --git a/drivers/net/wireless/ath/ath9k/ar9003_csi.c b/drivers/net/wireless/ath/ath9k/ar9003_csi.c
new file mode 100644
index 0000000..8757d40
--- /dev/null
+++ b/drivers/net/wireless/ath/ath9k/ar9003_csi.c
@@ -0,0 +1,325 @@
+/*
+ * =====================================================================================
+ *       Filename:  ath9k_csi.c
+ *
+ *    Description:  extrac csi and data together from hardware
+ *        Version:  1.0
+ *
+ *         Author:  Yaxiong Xie 
+ *         Email :  <xieyaxiongfly@gmail.com>
+ *   Organization:  WANDS group @ Nanyang Technological University 
+ *
+ *   Copyright (c)  WANDS group @ Nanyang Technological University
+ * =====================================================================================
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/wait.h>
+#include <linux/netdevice.h>
+
+#include "ar9003_csi.h"
+#include "ar9003_mac.h"
+#include "ar9003_phy.h"
+#include "mac.h"
+#include "hw.h"
+
+#define Tx_Buf_LEN      20480                 // Generally, buffere with 20480 bits is enough
+                                              // You can change the size freely
+
+//#define Rx_Buf_LEN      128                   // Generally, buffere with 20480 bits is enough
+
+#define BITS_PER_BYTE   8
+#define BITS_PER_SYMBOL 10
+#define BITS_PER_COMPLEX_SYMBOL  (2 * BITS_PER_SYMBOL)
+
+#define DEVICE_NAME     "CSI_dev"
+#define CLASS_NAME      "CSI_class"
+#define AH_MAX_CHAINS   3                     //maximum chain number, we set it to 3
+#define NUM_OF_CHAINMASK (1 << AH_MAX_CHAINS)
+
+
+volatile u32        csi_head;
+volatile u32        csi_tail;
+volatile u32        csi_len;
+volatile u32        csi_valid;
+volatile u32        recording;
+
+static struct       ath9k_csi csi_buf[16];
+static char         tx_buf[Tx_Buf_LEN];
+//static char         rx_buf[Rx_Buf_LEN];
+
+static int          majorNumber;             	  
+static struct       class*  ebbcharClass  = NULL; 
+static struct       device* ebbcharDevice = NULL; 
+
+DECLARE_WAIT_QUEUE_HEAD(csi_queue);
+
+static int          csi_open(struct inode *inode, struct file *file);
+static int          csi_close(struct inode *inode, struct file *file);
+static ssize_t      csi_read(struct file *file, char __user *user_buf,
+				        size_t count, loff_t *ppos);
+static ssize_t      csi_write(struct file *file, const char __user *user_buf,
+			            size_t count, loff_t *ppos);
+
+static const struct file_operations csi_fops = {
+	.read           = csi_read,
+	.write          = csi_write,
+	.open           = csi_open,
+    .release        = csi_close,
+	.llseek         = default_llseek,
+};
+
+static u_int8_t Num_bits_on[NUM_OF_CHAINMASK] = {
+    0 /*       000 */,
+    1 /*       001 */,
+    1 /*       010 */,
+    2 /*       011 */,
+    1 /*       100 */,
+    2 /*       101 */,
+    2 /*       110 */,
+    3 /*       111 */
+};
+
+u_int8_t ar9300_get_nrx_csi(struct ath_hw *ah)
+{
+	return Num_bits_on[ah->rxchainmask];
+}
+
+static int __init csi_init(void)
+{
+
+    // initalize parameters 
+    csi_head    = 0;
+    csi_tail    = 0;
+    recording   = 0;
+    csi_valid   = 0;
+    
+    // Try to dynamically allocate a major number for the device -- more difficult but worth it
+    majorNumber = register_chrdev(0, DEVICE_NAME, &csi_fops);
+    if (majorNumber<0){
+       printk(KERN_ALERT "debug_csi: failed to register a major number\n");
+       return majorNumber;
+    }
+    printk(KERN_INFO "debug_csi: registered correctly with major number %d\n", majorNumber);
+
+    // Register the device class
+    ebbcharClass = class_create(THIS_MODULE, CLASS_NAME);
+    if (IS_ERR(ebbcharClass)){                // Check for error and clean up if there is
+       unregister_chrdev(majorNumber, DEVICE_NAME);
+       printk(KERN_ALERT "debug_csi: Failed to register device class\n");
+       return PTR_ERR(ebbcharClass);          // Correct way to return an error on a pointer
+    }
+    printk(KERN_INFO "debug_csi: device class registered correctly\n");
+    
+    // Register the device driver
+    ebbcharDevice = device_create(ebbcharClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
+    if (IS_ERR(ebbcharDevice)){               // Clean up if there is an error
+       class_destroy(ebbcharClass);           // Repeated code but the alternative is goto statements
+       unregister_chrdev(majorNumber, DEVICE_NAME);
+       printk(KERN_ALERT "Failed to create the device\n");
+       return PTR_ERR(ebbcharDevice);
+    }
+    printk(KERN_INFO "debug_csi: device class created correctly \n"); // Made it! device was initialized
+    
+    return 0;
+}
+
+static void __exit csi_exit(void)
+{
+    /* delete and unregister the devices we have created and registered */
+    device_destroy(ebbcharClass, MKDEV(majorNumber, 0));     // remove the device
+    class_unregister(ebbcharClass);                          // unregister the device class
+    class_destroy(ebbcharClass);                             // remove the device class
+    unregister_chrdev(majorNumber, DEVICE_NAME);             // unregister the major number
+    printk(KERN_INFO "debug_csi: Goodbye CSI device!\n");
+
+}
+
+static int csi_open(struct inode *inode, struct file *file)
+{
+    printk(KERN_ALERT "debug_csi: csi open! \n");
+    recording = 1;                                            // we can begin to record when  
+                                                              // the devices is open 
+    return 0;
+}
+
+static int csi_close(struct inode *inode, struct file *file)
+{
+    printk(KERN_ALERT "debug_csi: csi close! \n");
+    recording = 0;                                            // close and reset 
+	return 0;
+}
+
+static ssize_t csi_read(struct file *file, char __user *user_buf,
+				      size_t count, loff_t *ppos)
+{
+    u_int16_t len;
+    u_int8_t *csi_buf_addr;
+    u_int8_t *payload_buf_addr;
+    u_int16_t csi_len, payload_len;
+    struct ath9k_csi* csi;
+    struct csi_pkt_status *RxStatus;
+    
+    *ppos = 0;
+    
+    if (csi_head == csi_tail) 
+    {                                                       // wait until time out
+        wait_event_interruptible_timeout(csi_queue,csi_head != csi_tail,  5*HZ);
+    } 
+    if(csi_head != csi_tail){
+        csi = (struct ath9k_csi*)&csi_buf[csi_tail];
+        len = 0;
+        
+        RxStatus         = &(csi->pkt_status);              // the status struct
+        
+        csi_len          = RxStatus->csi_len;               // csi length (bytes) 
+        csi_buf_addr     = csi->csi_buf;                    // csi buffer 
+        payload_len      = csi->payload_len;                // payload length (bytes)
+        payload_buf_addr = csi->payload_buf;                // payload buffer
+        
+
+        memcpy(tx_buf,RxStatus,23);                         // copy the status to the buffer 
+        len += 23;
+        
+        memcpy(tx_buf+len,&payload_len, 2);                 // record the length of payload 
+        len += 2;
+        
+        if (csi_len > 0){
+            memcpy(tx_buf+len,csi_buf_addr,csi_len);        // copy csi to the buffer
+            len += csi_len;
+        }
+        
+        memcpy(tx_buf+len,payload_buf_addr, payload_len);   // copy payload to the buffer
+        len += payload_len;
+        
+        memcpy(tx_buf+len,&len, 2);                         // record how many bytes we copy 
+        len += 2;
+        
+        copy_to_user(user_buf,tx_buf,len);                  // COPY
+        
+        csi_tail = (csi_tail+1) & 0x0000000F;               // delete the buffer 
+        return len;
+    }else{
+        return 0;
+    }
+}
+
+static ssize_t csi_write(struct file *file, const char __user *user_buf,
+			     size_t count, loff_t *ppos)
+{
+    printk(KERN_ALERT "debug_csi: csi write!\n");
+	return 0;
+}
+
+void csi_record_payload(void* data, u_int16_t data_len)
+{
+    struct ath9k_csi* csi;
+    if(recording )
+    {
+        if( ((csi_head + 1) & 0x0000000F) == csi_tail)              // check and update 
+            csi_tail = (csi_tail + 1) & 0x0000000F;
+        
+        csi = (struct ath9k_csi*)&csi_buf[csi_head];
+        memcpy((void*)(csi->payload_buf),data, data_len);           // copy the payload
+        csi->payload_len = data_len;                                // record the payload length (bytes)
+        csi_valid = 1;
+    }
+}
+EXPORT_SYMBOL(csi_record_payload);
+
+void csi_record_status(struct ath_hw *ah, struct ath_rx_status *rxs, struct ar9003_rxs *rxsp,void* data)
+{
+    struct ath9k_csi* csi;
+
+    u_int8_t  nr;
+    u_int8_t  chan_BW;
+    u_int8_t  rx_not_sounding;
+    u_int8_t  rx_hw_upload_data;
+    u_int8_t  rx_hw_upload_data_valid;
+    u_int8_t  rx_hw_upload_data_type;
+    
+    rx_hw_upload_data             = (rxsp->status2 & AR_hw_upload_data) ? 1 : 0;
+    rx_not_sounding               = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
+    rx_hw_upload_data_valid       = (rxsp->status4 & AR_hw_upload_data_valid) ? 1 : 0;
+    rx_hw_upload_data_type        = MS(rxsp->status11, AR_hw_upload_data_type);
+   
+    if(rxs->rs_phyerr == 0 && rx_hw_upload_data == 0 &&
+                rx_hw_upload_data_valid == 0 && rx_hw_upload_data_type == 0){
+        return;
+    }
+
+    if(recording && csi_valid == 1)
+    {
+        csi = (struct ath9k_csi*)&csi_buf[csi_head];
+       
+        csi->pkt_status.tstamp    = rxs->rs_tstamp;     // time stamp of the rx packet 
+        
+        csi->pkt_status.channel   = ah->curchan->channel;               
+        
+        chan_BW                   = (rxsp->status4 & AR_2040) >> 1;        
+        csi->pkt_status.ChanBW    = chan_BW;            // channel bandwidth 
+        nr                        = ar9300_get_nrx_csi(ah);                    
+        csi->pkt_status.nr        = nr;                 // rx antennas number
+        
+        csi->pkt_status.phyerr    = rxs->rs_phyerr;     // PHY layer error code
+        
+        csi->pkt_status.rssi      = rxs->rs_rssi; 
+        csi->pkt_status.rssi_ctl0 = rxs->rs_rssi_ctl[0];            
+        csi->pkt_status.rssi_ctl1 = rxs->rs_rssi_ctl[1];
+        csi->pkt_status.rssi_ctl2 = rxs->rs_rssi_ctl[2];
+        
+        csi->pkt_status.noise     = 0;                  // to be updated
+        csi->pkt_status.rate      = rxs->rs_rate;       // data rate 
+        
+        rx_hw_upload_data         = (rxsp->status2 & AR_hw_upload_data) ? 1 : 0;
+        rx_not_sounding           = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
+        rx_hw_upload_data_valid   = (rxsp->status4 & AR_hw_upload_data_valid) ? 1 : 0;
+        rx_hw_upload_data_type    = MS(rxsp->status11, AR_hw_upload_data_type);
+        
+        // Decides how many tones(subcarriers) are used according to the channel bandwidth
+        if (chan_BW == 0){
+            csi->pkt_status.num_tones = 56;             // 20MHz Channel
+        }
+        else if (chan_BW == 1){
+            csi->pkt_status.num_tones = 114;            // 40MHz Channel
+        } 
+        else{
+            csi->pkt_status.num_tones = 56;             // 20MHz Channel
+            printk("Error happends for channel bandwidth recording!!\n");
+        }
+        
+        /* tx antennas number 
+         * NOTE: when the packet is received with error
+         * The antenna number value is not correct
+         */
+        csi->pkt_status.nc = (int) (rxs->rs_datalen * BITS_PER_BYTE) /
+                        (int) (BITS_PER_COMPLEX_SYMBOL * csi->pkt_status.nr * csi->pkt_status.num_tones);
+        printk("bebug_csi: nr is: %d, nc is %d   \n\n",csi->pkt_status.nr,csi->pkt_status.nc); 
+        /* copy the csi value to the allocated csi buffer */
+        if ( rxs->rs_datalen >0 && rx_hw_upload_data == 1 && rx_hw_upload_data_valid == 1 
+                && rx_hw_upload_data_type == 1){
+            csi->pkt_status.csi_len = rxs->rs_datalen;
+            memcpy((void*)(csi->csi_buf),data,rxs->rs_datalen);
+        }else {
+            csi->pkt_status.csi_len = 0;
+        }
+        
+        csi_valid = 0;                                  // update 
+        csi_head  = (csi_head + 1) & 0x0000000F;
+
+        wake_up_interruptible(&csi_queue);              // wake up waiting queue 
+    }
+}
+EXPORT_SYMBOL(csi_record_status);
+
+
+module_init(csi_init);
+module_exit(csi_exit);
+
+MODULE_AUTHOR("YAXIONG XIE");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("CSI EXTRACTION");
+
diff --git a/drivers/net/wireless/ath/ath9k/ar9003_csi.h b/drivers/net/wireless/ath/ath9k/ar9003_csi.h
new file mode 100644
index 0000000..dc21284
--- /dev/null
+++ b/drivers/net/wireless/ath/ath9k/ar9003_csi.h
@@ -0,0 +1,73 @@
+/*
+ * =====================================================================================
+ *       Filename:  ar003_csi.h
+ *
+ *    Description:  ar003_csi data structure definiation
+ *        Version:  1.0
+ *
+ *         Author:  Yaxiong Xie 
+ *         Email :  <xieyaxiongfly@gmail.com>
+ *   Organization:  WANDS group @ Nanyang Technological University 
+ *
+ *   Copyright (c)  WANDS group @ Nanyang Technological University
+ * =====================================================================================
+ */
+
+#include "hw.h"
+#include "mac.h"
+#include "ar9003_mac.h"
+
+#define DBG_CSI(fmt, args...) printk(fmt,## args)
+#define AR_rx_ness                  0x00000060
+#define AR_rx_ness_S                5
+#define AR_ness                     0xc0000000 
+#define AR_ness_S                   30
+#define AR_hw_upload_data           0x00400000
+#define AR_hw_upload_data_S         22
+#define AR_rx_not_sounding          0x00000010
+#define AR_not_sounding             0x20000000
+#define AR_hw_upload_data_valid     0x00000080
+#define AR_hw_upload_data_valid_S   7  
+#define AR_hw_upload_data_type      0x06000000
+#define AR_hw_upload_data_type_S    25
+
+#define AR_xmit_data_tries0   0x000f0000
+#define AR_xmit_data_tries0_S 16
+#define AR_xmit_data_tries1   0x00f00000
+#define AR_xmit_data_tries1_S 20
+#define AR_xmit_data_tries2   0x0f000000
+#define AR_xmit_data_tries2_S 24
+#define AR_xmit_data_tries3   0xf0000000
+#define AR_xmit_data_tries3_S 28
+
+struct csi_pkt_status {
+    u_int64_t   tstamp;      /* h/w assigned timestamp */
+    u_int16_t   csi_len;     /* csi length */
+    u_int16_t   channel;     /* receiving channel frequency */
+    u_int8_t	phyerr;	     /* phy error code */
+    
+    u_int8_t    noise;       /* noise floor */
+    u_int8_t	rate;	     /* h/w receive rate index */
+    u_int8_t    ChanBW;      /* receiving channel bandwidth */
+    u_int8_t    num_tones;   /* number of tones (subcarriers) */
+    u_int8_t    nr;          /* number of receiving antennas */
+    u_int8_t    nc;          /* number of transmitting anteannas */
+    
+    
+    u_int8_t    rssi;        /* rx frame RSSI */
+    u_int8_t    rssi_ctl0;   /* rx frame RSSI [ctl, chain 0] */
+    u_int8_t    rssi_ctl1;   /* rx frame RSSI [ctl, chain 1] */
+    u_int8_t    rssi_ctl2;   /* rx frame RSSI [ctl, chain 2] */
+};
+
+struct ath9k_csi {
+    struct csi_pkt_status pkt_status;
+
+    u_int8_t    csi_buf[2800];     //buffer for csi value, 3 antena, each with 114 subcarriers, real and imagine part
+    u_int8_t    payload_buf[1500]; //buffer for the payload, if you send payload larger than 1500Bytes, change it
+    u_int16_t   payload_len;
+
+};
+void   csi_record_payload(void* data, u_int16_t data_len);
+void   csi_record_status(struct ath_hw *hw, struct ath_rx_status *rxs,struct ar9003_rxs *rxsp,void* data); 
+
diff --git a/drivers/net/wireless/ath/ath9k/ar9003_mac.c b/drivers/net/wireless/ath/ath9k/ar9003_mac.c
index da84b70..79e0afd 100644
--- a/drivers/net/wireless/ath/ath9k/ar9003_mac.c
+++ b/drivers/net/wireless/ath/ath9k/ar9003_mac.c
@@ -17,6 +17,7 @@
 #include "hw.h"
 #include "ar9003_mac.h"
 #include "ar9003_mci.h"
+#include "ar9003_csi.h"
 
 static void ar9003_hw_rx_enable(struct ath_hw *hw)
 {
@@ -30,7 +31,8 @@ ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
 	int checksum = 0;
 	u32 val, ctl12, ctl17;
 	u8 desc_len;
-
+    u_int8_t rate1,rate2,rate3,rate4;
+    
 	desc_len = ((AR_SREV_9462(ah) || AR_SREV_9565(ah)) ? 0x18 : 0x17);
 
 	val = (ATHEROS_VENDOR_ID << AR_DescId_S) |
@@ -150,11 +153,29 @@ ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
 		| set11nRateFlags(i->rates, 3)
 		| SM(i->rtscts_rate, AR_RTSCTSRate);
 
-	ACCESS_ONCE(ads->ctl19) = AR_Not_Sounding;
-
 	ACCESS_ONCE(ads->ctl20) = SM(i->txpower[1], AR_XmitPower1);
 	ACCESS_ONCE(ads->ctl21) = SM(i->txpower[2], AR_XmitPower2);
 	ACCESS_ONCE(ads->ctl22) = SM(i->txpower[3], AR_XmitPower3);
+
+    rate1 = (ads->ctl14 >> 24) & 0xff;
+    rate2 = (ads->ctl14 >> 16) & 0xff;
+    rate3 = (ads->ctl14 >> 8)  & 0xff;
+    rate4 = (ads->ctl14 >> 0)  & 0xff;
+
+    if ( rate1 >= 0x80 || rate2 >= 0x80 || rate3 >= 0x80){
+	    ACCESS_ONCE(ads->ctl19) = 0;
+        ACCESS_ONCE(ads->ctl13) &= ~(AR_xmit_data_tries1 | AR_xmit_data_tries2 | AR_xmit_data_tries3);
+	    ACCESS_ONCE(ads->ctl20) &= 0x3f000000;
+	    ACCESS_ONCE(ads->ctl21) &= 0x3f000000;
+	    ACCESS_ONCE(ads->ctl22) &= 0x3f000000;
+    }else{
+	    ACCESS_ONCE(ads->ctl19) = AR_Not_Sounding;
+    }
+    if ( rate4 >= 0x80){
+	    ACCESS_ONCE(ads->ctl19) = 0;
+    }else{
+	    ACCESS_ONCE(ads->ctl19) = AR_Not_Sounding;
+    }
 }
 
 static u16 ar9003_calc_ptr_chksum(struct ar9003_txc *ads)
@@ -483,6 +504,9 @@ int ath9k_hw_process_rxdesc_edma(struct ath_hw *ah, struct ath_rx_status *rxs,
 	struct ar9003_rxs *rxsp = (struct ar9003_rxs *) buf_addr;
 	unsigned int phyerr;
 
+	void *data_addr;
+    	u_int16_t data_len;
+
 	if ((rxsp->status11 & AR_RxDone) == 0)
 		return -EINPROGRESS;
 
@@ -577,9 +601,25 @@ int ath9k_hw_process_rxdesc_edma(struct ath_hw *ah, struct ath_rx_status *rxs,
 			}
 		}
 	}
-
-	if (rxsp->status11 & AR_KeyMiss)
+   
+    if (rxsp->status11 & AR_KeyMiss)
 		rxs->rs_status |= ATH9K_RXERR_KEYMISS;
+    
+    data_len = rxs->rs_datalen;
+    data_addr = buf_addr + 48;
+    
+    if (rxsp->status11 & AR_CRCErr){
+        if (rxs->rs_rate >= 0x80){
+            csi_record_payload(data_addr,data_len);
+            csi_record_status(ah,rxs,rxsp,data_addr);
+        }
+    }else{
+        if  (rxs->rs_more == 1)
+            csi_record_payload(data_addr,data_len);
+
+        if (rxs->rs_rate >= 0x80)
+            csi_record_status(ah,rxs,rxsp,data_addr);
+ 	}
 
 	return 0;
 }
diff --git a/drivers/net/wireless/ath/ath9k/hw.c b/drivers/net/wireless/ath/ath9k/hw.c
index 5e15e8e..483fd70 100644
--- a/drivers/net/wireless/ath/ath9k/hw.c
+++ b/drivers/net/wireless/ath/ath9k/hw.c
@@ -1818,6 +1818,7 @@ int ath9k_hw_reset(struct ath_hw *ah, struct ath9k_channel *chan,
 	u32 saveLedState;
 	u32 saveDefAntenna;
 	u32 macStaId1;
+	u32 tmp;
 	u64 tsf = 0;
 	s64 usec = 0;
 	int r;
@@ -2028,6 +2029,10 @@ int ath9k_hw_reset(struct ath_hw *ah, struct ath9k_channel *chan,
 		ah->radar_conf.ext_channel = IS_CHAN_HT40(chan);
 		ath9k_hw_set_radar_params(ah);
 	}
+	//csi_debug 
+    	tmp = REG_READ(ah,0x8344);
+    	tmp |= (1 << 28);
+    	REG_WRITE(ah, 0x8344,tmp);
 
 	return 0;
 }
diff --git a/drivers/net/wireless/ath/ath9k/init.c b/drivers/net/wireless/ath/ath9k/init.c
index f8d11ef..97ec3a7 100644
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -831,7 +831,7 @@ static void ath9k_set_hw_capab(struct ath_softc *sc, struct ieee80211_hw *hw)
 		hw->flags |= IEEE80211_HW_SUPPORTS_PS;
 
 	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_HT) {
-		hw->flags |= IEEE80211_HW_AMPDU_AGGREGATION;
+		//hw->flags |= IEEE80211_HW_AMPDU_AGGREGATION;
 
 		if (AR_SREV_9280_20_OR_LATER(ah))
 			hw->radiotap_mcs_details |=
